for (i in 2:1000){
x[i] = x[i - 1] + sample(step, 1)
}
x = NULL
for (i in 2:1000){
x[i] = x[i - 1] + sample(step, 1)
}
?step
x[i] = x[i - 1] + rnorm(1)
x = NULL
for (i in 2:1000){
x[i] = x[i - 1] + rnorm(1)
}
x
x = numeric(1000)
x
for (i in 2:1000){
x[i] = x[i - 1] + sample(c(1, -1), 1)
}
x
plot(x)
plot(x, type=l)
plot(x, type="l")
for (i in 2:1000){
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
test = data[ measuredElement == "5510" & timePointYears == "2013",]
str(test)
write.csv(test, "uploadTest.csv", row.names = F)
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
actionButton("uploadProduction", "Upload!", styleclass="success"),
shiny::runApp('shinyFBS')
c("CPC code", "Description")),
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
#                                    radioButtons('recognize', "Recognize Items through",
#                                                 c(CPC code = '', Description = '')),
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
c(CPCcode = "CPCCode", Description = "Description")),
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
data.table(A = c("A", "B", "C"))
data.table(A = as.Date(1990:2015), B = rnorm(26))
data.table(A = as.character(as.Date(1990:2015), format = '%Y', B = rnorm(26))
)
data.table(A = as.character(as.Date(1990:2015), format = '%Y'), B = rnorm(26))
?ts
library(xts)
?xts
shiny::runApp('shinyFBS')
data.table(A = as.character(as.Date(1990:2015, format = '%Y')), B = rnorm(26))
data.table(A = as.Date(as.character(1990:2015), format = '%Y'), B = rnorm(26))
test = data.table(A = as.Date(as.character(1990:2015), format = '%Y'), B = rnorm(26))
xts(test)
xts(test, order.by = "A")
xts(test, order.by = test$A)
test2 = xts(test, order.by = test$A)
dygraph(test2, main ="BlaBla") %>% dySeries("V1", label"Portfolio")
dygraph(test2, main ="BlaBla") %>% dySeries("V1", label = "Portfolio")
library(dygraphs)
dygraph(test2, main ="BlaBla") %>% dySeries("V1", label = "Portfolio")
dygraph(test2, main ="BlaBla") %>% dySeries("B", label = "Portfolio")
shiny::runApp('shinyFBS')
test = data.table(A = as.Date(as.character(1990:2015), format = '%Y'), B = rnorm(26))
test
t(test)
t(t(test))
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
tableA = data.table(A = c("A", "B", "C"), B = 1:3)
tableA
t(tableA)
str(t(tableA))
test = data.table(A = 1:2, B = 3:4, C=5:6)
test
t(test)
melt.data.table(test)
melt.data.table(test, id.vars = NULL)
shiny::runApp('shinyFBS')
tableA = data.table([2010] = 1, [2011] = 2, [2012] = 3)
tableA = data.table("[2010]" = 1, "[2011]" = 2, "[2012]2 = 3)
tableA = data.table("[2010]" = 1, "[2011]" = 2, "[2012]" = 3)
tableA = data.table("[2010]" = 1, "[2011]" = 2, "[2012]" = 3)
tableA
transpose(tableA)
names(tableA)
data.table(A = names(tableA), B= 1:3)
data.table(A = names(tableA), tableA[1,])
data.table(A = names(tableA), tableA[,1])
tableA[1,]
data.table(A = names(tableA), tableA[1,])
?data.table
as.matrix(tableA)
?as.matrix
as.matrix(tableA, dimnames = F)
t(as.matrix(tableA, dimnames = F))
tableA
as.matrix(tableA, dimnames = F)
names(as.matrix(tableA, dimnames = F))
tableA
names(tableA)
tableA[1,]
tableA[,1]
tableA[1,1]
tableA[1,]
tableA[1,1:3]
test = data.table(A = names(tableA), B = tableA[1,1:3])
test
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
data.frame?
))
?data.frame
"data.frame"
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
library(xts)
?"xts-package"
?xts
shiny::runApp('shinyFBS')
library(dygraphs)
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
library(dygraphs)
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
?href
??href
a(href = 'blabla', 'mtcars.csv'), 'or',
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
actionButton("compileFBS", "Compile FBS!", styleclass = 'warning', block = T))
shiny::runApp('shinyFBS')
actionButton("compileFBS", "Compile FBS!", styleclass = 'alert', block = T))
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
column(2, actionButton("upload", "Upload File", styleclass="warning",block =T)),
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
}
}
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
Production
data
tableA = data.table(measuredItemCPC = c("111", "112", "115", "116"), Item = ("Wheat", "Maize", "Barley", "Sorghum"), "[2011]" = c(rnorm(4)), "[2012]" = c(rnorm(4)), "[2013]" = c(rnorm(4)))
tableA = data.table(measuredItemCPC = c("111", "112", "115", "116"), Item = ("Wheat", "Maize", "Barley", "Sorghum"), "[2011]" = rnorm(4), "[2012]" = rnorm(4), "[2013]" = rnorm(4))
tableA = data.table(measuredItemCPC = c("111", "112", "115", "116"), Item = c("Wheat", "Maize", "Barley", "Sorghum"), "[2011]" = rnorm(4), "[2012]" = rnorm(4), "[2013]" = rnorm(4))
tableA
str(tableA)
tableB = data.table(measuredItem = c("111", "112"), "[2014]" = c(5, 6))
tableB
tableA[tableB, names(tableB) := tableB, on = c("geographicAreaM49", "geographicArea", "measuredItemCPC",
"measuredElement", "Element", "timePointYears"), nomatch = NA]
tableA[tableB, names(tableB) := tableB, on = c("geographicAreaM49", "geographicArea", "measuredItemCPC",
"measuredElement", "Element", "timePointYears"), nomatch = NA]
tableA[tableB, names(tableB) := tableB, on = c("measuredItemCPC"), nomatch = NA]
str(tableB)
str(tableA)
tableA = data.table(measuredItemCPC = c("111", "112", "115", "116"),
Item = c("Wheat", "Maize", "Barley", "Sorghum"),
"[2011]" = rnorm(4), "[2012]" = rnorm(4),
"[2013]" = rnorm(4))
tableB = data.table(measuredItemCPC = c("111", "112"), "[2014]" = c(5, 6))
tableA[tableB, names(tableB) := tableB, on = c("measuredItemCPC"), nomatch = NA]
tableA
shiny::runApp('shinyFBS')
#    if(!is.null(input$uploadProduction)){
#      uploadData = as.data.table(productionUploadTable())
#      names(uploadData) = c("measuredItemCPC", paste0("[", input$FBSSUAyear, "]", sep=""))
#      wideSuaTable[uploadData, names(uploadData) := uploadData, on = c("measuredItemCPC"), nomatch = NA]
#   }
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
}
shiny::runApp('shinyFBS')
uploadData = as.data.table(productionUploadTable())
shiny::runApp('shinyFBS')
if(input$uploadProduction > 0){
))
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
suaElementTable
suaElementTable[measuredElement == "5510", Element]
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
suaElementTable
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
?eists
?exists
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
istall.packages("maps")
istall.packages("maps")
install.packages("maps")
install.packages(ggsubplot)
install.packages("ggsubplot")
library(ggsubplot)
library(ggplot2)
library(maps)
library(plyr)
#Get world map info
world_map <- map_data("world")
#Create a base plot
p <- ggplot()  + geom_polygon(data=world_map,aes(x=long, y=lat,group=group))
# Calculate the mean longitude and latitude per region, these will be the coördinates where the plots will be placed, so you can tweak them where needed.
# Create simulation data of the age distribution per region and merge the two.
centres <- ddply(world_map,.(region),summarize,long=mean(long),lat=mean(lat))
mycat <- cut(runif(1000), c(0, 0.1, 0.3, 0.6, 1), labels=FALSE)
mycat <- as.factor(mycat)
age <- factor(mycat,labels=c("<15","15-30","20-60",">60"))
simdat <- merge(centres ,age)
colnames(simdat) <- c( "region","long","lat","Age" )
# Select the countries where you want a subplot for and plot
simdat2 <- subset(simdat, region %in% c("USA","China","USSR","Brazil", "Australia"))
(testplot <- p+geom_subplot2d(aes(long, lat, subplot = geom_bar(aes(Age, ..count.., fill = Age))), bins = c(15,12), ref = NULL, width = rel(0.8), data = simdat2))
world_map <- map_data("world")
world_map
p <- ggplot()  + geom_polygon(data=world_map,aes(x=long, y=lat,group=group))
p
centres <- ddply(world_map,.(region),summarize,long=mean(long),lat=mean(lat))
centres
mycat <- cut(runif(1000), c(0, 0.1, 0.3, 0.6, 1), labels=FALSE)
mycat <- as.factor(mycat)
age <- factor(mycat,labels=c("<15","15-30","20-60",">60"))
simdat <- merge(centres ,age)
colnames(simdat) <- c( "region","long","lat","Age" )
# Select the countries where you want a subplot for and plot
simdat2 <- subset(simdat, region %in% c("USA","China","USSR","Brazil", "Australia"))
(testplot <- p+geom_subplot2d(aes(long, lat, subplot = geom_bar(aes(Age, ..count.., fill = Age))), bins = c(15,12), ref = NULL, width = rel(0.8), data = simdat2))
package.Version(ggplot2)
packageVersion(ggplot2)
packageVersion(ggplot2)
packageVersion("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggsubplot)
library(ggplot2)
library(maps)
library(plyr)
#Get world map info
world_map <- map_data("world")
#Create a base plot
p <- ggplot()  + geom_polygon(data=world_map,aes(x=long, y=lat,group=group))
# Calculate the mean longitude and latitude per region, these will be the coördinates where the plots will be placed, so you can tweak them where needed.
# Create simulation data of the age distribution per region and merge the two.
centres <- ddply(world_map,.(region),summarize,long=mean(long),lat=mean(lat))
mycat <- cut(runif(1000), c(0, 0.1, 0.3, 0.6, 1), labels=FALSE)
mycat <- as.factor(mycat)
age <- factor(mycat,labels=c("<15","15-30","20-60",">60"))
simdat <- merge(centres ,age)
colnames(simdat) <- c( "region","long","lat","Age" )
# Select the countries where you want a subplot for and plot
simdat2 <- subset(simdat, region %in% c("USA","China","USSR","Brazil", "Australia"))
(testplot <- p+geom_subplot2d(aes(long, lat, subplot = geom_bar(aes(Age, ..count.., fill = Age))), bins = c(15,12), ref = NULL, width = rel(0.8), data = simdat2))
library(ggsubplot)
library(ggplot2)
library(maps)
library(plyr)
#Get world map info
world_map <- map_data("world")
#Create a base plot
p <- ggplot()  + geom_polygon(data=world_map,aes(x=long, y=lat,group=group))
# Calculate the mean longitude and latitude per region, these will be the coördinates where the plots will be placed, so you can tweak them where needed.
# Create simulation data of the age distribution per region and merge the two.
centres <- ddply(world_map,.(region),summarize,long=mean(long),lat=mean(lat))
mycat <- cut(runif(1000), c(0, 0.1, 0.3, 0.6, 1), labels=FALSE)
mycat <- as.factor(mycat)
age <- factor(mycat,labels=c("<15","15-30","20-60",">60"))
simdat <- merge(centres ,age)
colnames(simdat) <- c( "region","long","lat","Age" )
# Select the countries where you want a subplot for and plot
simdat2 <- subset(simdat, region %in% c("USA","China","USSR","Brazil", "Australia"))
testplot <- p+geom_subplot2d(aes(long, lat, subplot = geom_bar(aes(Age, ..count.., fill = Age))), bins = c(15,12), ref = NULL, width = rel(0.8), data = simdat2))
(testplot <- p+geom_subplot2d(aes(long, lat, subplot = geom_bar(aes(Age, ..count.., fill = Age))), bins = c(15,12), ref = NULL, width = rel(0.8), data = simdat2))
?aes
library(ggplot2)
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
shiny::runApp('shinyFBS')
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0),
size=2) +
theme_minimal()
library(ggplot2)
library(reshape2)
library(data.table)
donors = as.data.table(read.csv("Top_10_donor_data.csv"))
recipients = as.data.table(read.csv("Top_10_recipient_data.csv"))
setnames(donors, c("amounts..copy.", "Donor.Name"), c("type", "country"))
donors[, type := rep("donor", length(donors[, type]))]
setnames(recipients, c("amounts..copy.", "Recipient"),  c("type", "country"))
setwd("/home/bernhard/Dropbox/University of Goettingen/Semester III/Seminar Latin America/Plots")
donors = as.data.table(read.csv("Top_10_donor_data.csv"))
recipients = as.data.table(read.csv("Top_10_recipient_data.csv"))
setnames(donors, c("amounts..copy.", "Donor.Name"), c("type", "country"))
donors[, type := rep("donor", length(donors[, type]))]
setnames(recipients, c("amounts..copy.", "Recipient"),  c("type", "country"))
recipients[, type := rep("recipient", length(recipients[, type]))]
ggplot(donorsRecipients, aes(x=country, y = amounts)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(axis.text.y=element_text(size=rel(0.8))) +
facet_wrap(~type)
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0),
size=2)
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0),
size=9, color = 'dodgeblue4')
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0),
size=9, color = 'dodgerblue4')
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0),
size=9, color = 'dodgerblue4')
labs(x="Mio USD", y="",
title="Top 10 Donors")
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0),
size=9, color = 'dodgerblue4') +
labs(x="Mio USD", y="",
title="Top 10 Donors")
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=9, color = 'dodgerblue4') +
labs(x="Mio USD", y="",title="Top 10 Donors")  +
theme(plot.title = element_text(lineheight=4, face="bold"))
ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=9, color = 'dodgerblue4') +
labs(x="Mio USD", y="",title="Top 10 Donors")  +
scale_x_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight=4, face="bold"))
recipientPlot = ggplot(recipients, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=9, color = 'red4') +
labs(x="Mio USD", y="",title="Top 10 Recipients")  +
scale_x_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight=4, face="bold"))
recipientPlot
grid.arrange(donorPlot, recipientPlot, ncol=2,widths=c(1,1))
library(grid)
library(gridExtra)
grid.arrange(donorPlot, recipientPlot, ncol=2,widths=c(1,1))
donorPlot = ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=9, color = 'dodgerblue4') +
labs(x="Mio USD", y="",title="Top 10 Donors")  +
scale_x_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight=4, face="bold"))
grid.arrange(donorPlot, recipientPlot, ncol=2,widths=c(1,1))
donorPlot = ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=9, color = 'dodgerblue4') +
labs(x="Mio USD", y="",title="Top 10 Donors")  +
scale_x_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight=4, face="bold"))
recipientPlot = ggplot(recipients, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=7, color = 'red4') +
labs(x="Mio USD", y="",title="Top 10 Recipients")  +
scale_x_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight=4, face="bold"))
grid.arrange(donorPlot, recipientPlot, ncol=2,widths=c(1,1))
donorPlot = ggplot(donors, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=6, color = 'dodgerblue4') +
labs(x="Mio USD", y="",title="Top 10 Donors")  +
scale_x_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight=4, face="bold"))
recipientPlot = ggplot(recipients, aes(x=amounts, y=reorder(factor(country),amounts)))+
geom_segment(aes(yend=country,xend=0), size=6, color = 'red4') +
labs(x="Mio USD", y="",title="Top 10 Recipients")  +
scale_x_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight=4, face="bold"))
grid.arrange(donorPlot, recipientPlot, ncol=2,widths=c(1,1))
